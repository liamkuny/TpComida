{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport function useScreenReaderEnabled() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    enabled = _React$useState2[0],\n    setEnabled = _React$useState2[1];\n  var mountedRef = React.useRef(false);\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n  React.useEffect(function () {\n    mountedRef.current = true;\n    function setInitialValue() {\n      var res;\n      return _regeneratorRuntime.async(function setInitialValue$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AccessibilityInfo.isScreenReaderEnabled());\n          case 2:\n            res = _context.sent;\n            handleSetEnabled(res);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, null, Promise);\n    }\n    var handler = AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}","map":{"version":3,"names":["React","AccessibilityInfo","useScreenReaderEnabled","_React$useState","useState","_React$useState2","_slicedToArray","enabled","setEnabled","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","res","_regeneratorRuntime","async","setInitialValue$","_context","prev","next","awrap","isScreenReaderEnabled","sent","stop","Promise","handler","addEventListener","event","removeEventListener"],"sources":["C:\\Users\\devandroid\\Desktop\\BIEEN\\TpComida\\node_modules\\native-base\\lib\\module\\hooks\\useScreenReaderEnabled.ts"],"sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA,OAAAC,iBAAA;AAGA,OAAO,SAASC,sBAATA,CAAA,EAAkC;EACvC,IAAAC,eAAA,GAA8BH,KAAK,CAACI,QAAN,CAAe,KAAf,CAA9B;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAOI,OAAD,GAAAF,gBAAA;IAAUG,UAAV,GAAAH,gBAAA;EACN,IAAMI,UAAU,GAAGT,KAAK,CAACU,MAAN,CAAa,KAAb,CAAnB;EAEA,IAAMC,gBAAgB,GAAI,SAApBA,gBAAgBA,CAAIC,KAAD,EAAoB;IAC3C,IAAIH,UAAU,CAACI,OAAf,EAAwB;MACtBL,UAAU,CAACI,KAAD,CAAV;IACD;EACF,CAJD;EAMAZ,KAAK,CAACc,SAAN,CAAgB,YAAM;IACpBL,UAAU,CAACI,OAAX,GAAqB,IAArB;IACA,SAAeE,eAAfA,CAAA;MAAA,IAAAC,GAAA;MAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,iBAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAAAL,mBAAA,CAAAM,KAAA,CACoBtB,iBAAiB,CAACuB,qBAAlB,EAAlB;UAAA;YAAMR,GAAG,GAAAI,QAAA,CAAAK,IAAA;YACTd,gBAAgB,CAACK,GAAD,CAAhB;UAAA;UAAA;YAAA,OAAAI,QAAA,CAAAM,IAAA;QAAA;MAAA,qBAAAC,OAAA;IAAA;IAGF,IAAIC,OAAY,GAAG3B,iBAAiB,CAAC4B,gBAAlB,CACjB,qBADiB,EAEhB,UAAAC,KAAD,EAAgB;MACdnB,gBAAgB,CAACmB,KAAD,CAAhB;IACD,CAJgB,CAAnB;IAOAf,eAAe;IACf,OAAO,YAAM;MACXN,UAAU,CAACI,OAAX,GAAqB,KAArB;MACAZ,iBAAiB,CAAC8B,mBAAlB,CAAsC,qBAAtC,EAA6DH,OAA7D;IACD,CAHD;EAID,CAnBD;EAqBA,OAAOrB,OAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}