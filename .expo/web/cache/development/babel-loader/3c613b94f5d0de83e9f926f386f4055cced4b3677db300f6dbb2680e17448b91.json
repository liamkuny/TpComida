{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useEffect as $cKEhs$useEffect } from \"react\";\nimport { useToggle as $cKEhs$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $cKEhs$filterDOMProps, mergeProps as $cKEhs$mergeProps } from \"@react-aria/utils\";\nimport { useLabel as $cKEhs$useLabel } from \"@react-aria/label\";\nimport { useToggleState as $cKEhs$useToggleState } from \"@react-stately/toggle\";\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  var _$cKEhs$useToggle = $cKEhs$useToggle(props, state, inputRef),\n    inputProps = _$cKEhs$useToggle.inputProps;\n  var isSelected = state.isSelected;\n  var isIndeterminate = props.isIndeterminate;\n  $cKEhs$useEffect(function () {\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    })\n  };\n}\nvar $1ae600c947479353$export$31440636951aa68c = new WeakMap();\nfunction $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {\n  var isDisabled = props.isDisabled,\n    name = props.name;\n  var _$cKEhs$useLabel = $cKEhs$useLabel(_objectSpread(_objectSpread({}, props), {}, {\n      labelElementType: 'span'\n    })),\n    labelProps = _$cKEhs$useLabel.labelProps,\n    fieldProps = _$cKEhs$useLabel.fieldProps;\n  var domProps = $cKEhs$filterDOMProps(props, {\n    labelable: true\n  });\n  $1ae600c947479353$export$31440636951aa68c.set(state, name);\n  return {\n    groupProps: $cKEhs$mergeProps(domProps, _objectSpread({\n      role: 'group',\n      'aria-disabled': isDisabled || undefined\n    }, fieldProps)),\n    labelProps: labelProps\n  };\n}\nfunction $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {\n  var toggleState = $cKEhs$useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange: function onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n  });\n  var _$406796ff087fe49b$ex = $406796ff087fe49b$export$e375f10ce42261c5(_objectSpread(_objectSpread({}, props), {}, {\n      isReadOnly: props.isReadOnly || state.isReadOnly,\n      isDisabled: props.isDisabled || state.isDisabled,\n      name: props.name || $1ae600c947479353$export$31440636951aa68c.get(state)\n    }), toggleState, inputRef),\n    inputProps = _$406796ff087fe49b$ex.inputProps;\n  return {\n    inputProps: inputProps\n  };\n}\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox, $1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup, $fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem };","map":{"version":3,"names":["$406796ff087fe49b$export$e375f10ce42261c5","props","state","inputRef","_$cKEhs$useToggle","$cKEhs$useToggle","inputProps","isSelected","isIndeterminate","$cKEhs$useEffect","current","indeterminate","_objectSpread","checked","$1ae600c947479353$export$31440636951aa68c","WeakMap","$1e9fce0cfacc738b$export$49ff6f28c54f1cbe","isDisabled","name","_$cKEhs$useLabel","$cKEhs$useLabel","labelElementType","labelProps","fieldProps","domProps","$cKEhs$filterDOMProps","labelable","set","groupProps","$cKEhs$mergeProps","role","undefined","$fba3e38d5ca8983f$export$353b32fc6898d37d","toggleState","$cKEhs$useToggleState","isReadOnly","value","onChange","addValue","removeValue","_$406796ff087fe49b$ex","get"],"sources":["C:\\Users\\devandroid\\Desktop\\BIEEN\\TpComida\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\index.ts","C:\\Users\\devandroid\\Desktop\\BIEEN\\TpComida\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\useCheckbox.ts","C:\\Users\\devandroid\\Desktop\\BIEEN\\TpComida\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\useCheckboxGroup.ts","C:\\Users\\devandroid\\Desktop\\BIEEN\\TpComida\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\utils.ts","C:\\Users\\devandroid\\Desktop\\BIEEN\\TpComida\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\useCheckboxGroupItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {CheckboxAria} from './useCheckbox';\nexport {useCheckbox} from './useCheckbox';\nexport {useCheckboxGroup} from './useCheckboxGroup';\nexport {useCheckboxGroupItem} from './useCheckboxGroupItem';\nexport type {AriaCheckboxGroupItemProps, AriaCheckboxGroupProps, AriaCheckboxProps} from '@react-types/checkbox';\nexport type {CheckboxGroupAria} from './useCheckboxGroup';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\n\nexport interface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: DOMAttributes,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"],"mappings":";;;;;;;;SC8BgBA,yCAAWA,CAACC,KAAwB,EAAEC,KAAkB,EAAEC,QAAqC,EAAgB;EAC7H,IAAAC,iBAAA,GAAmBC,gBAAS,CAACJ,KAAK,EAAEC,KAAK,EAAEC,QAAQ;IAA9CG,UAAU,GAAAF,iBAAA,CAAVE,UAAA;EACL,IAAKC,UAAU,GAAIL,KAAK,CAAnBK,UAAA;EAEL,IAAKC,eAAe,GAAIP,KAAK,CAAxBO,eAAA;EACLC,gBAAS,aAAO;IAGd,IAAIN,QAAQ,CAACO,OAAO,EAClBP,QAAQ,CAACO,OAAO,CAACC,aAAa,GAAGH,eAAe;EAEpD,CAAC;EAED,OAAO;IACLF,UAAU,EAAAM,aAAA,CAAAA,aAAA,KACLN,UAAU;MACbO,OAAO,EAAEN,UAAU;MACnB,cAAc,EAAEC,eAAe,GAAG,OAAO,GAAGD;IAAU;EAE1D,CAAC;AACH;AEpCO,IAAMO,yCAAkB,GAAG,IAAIC,OAAO;SDkB7BC,yCAAgBA,CAACf,KAA6B,EAAEC,KAAyB,EAAqB;EAC5G,IAAKe,UAAU,GAAUhB,KAAK,CAAzBgB,UAAA;IAAYC,IAAI,GAAIjB,KAAK,CAAfiB,IAAA;EAEf,IAAAC,gBAAA,GAA+BC,eAAQ,CAAAR,aAAA,CAAAA,aAAA,KAClCX,KAAK;MAGRoB,gBAAgB,EAAE;IAAM,EACzB;IALIC,UAAU,GAAAH,gBAAA,CAAVG,UAAA;IAAYC,UAAU,GAAAJ,gBAAA,CAAZI,UAAA;EAOf,IAAIC,QAAQ,GAAGC,qBAAc,CAACxB,KAAK,EAAE;IAACyB,SAAS,EAAE;EAAI,CAAC;EAGtDZ,yCAAkB,CAACa,GAAG,CAACzB,KAAK,EAAEgB,IAAI;EAElC,OAAO;IACLU,UAAU,EAAEC,iBAAU,CAACL,QAAQ,EAAAZ,aAAA;MAC7BkB,IAAI,EAAE,OAAO;MACb,eAAe,EAAEb,UAAU,IAAIc;IAAS,GACrCR,UAAU,CACd;gBACDD;EACF,CAAC;AACH;SE7BgBU,yCAAoBA,CAAC/B,KAAiC,EAAEC,KAAyB,EAAEC,QAAqC,EAAgB;EACtJ,IAAM8B,WAAW,GAAGC,qBAAc,CAAC;IACjCC,UAAU,EAAElC,KAAK,CAACkC,UAAU,IAAIjC,KAAK,CAACiC,UAAU;IAChD5B,UAAU,EAAEL,KAAK,CAACK,UAAU,CAACN,KAAK,CAACmC,KAAK;IACxCC,QAAQ,WAAAA,SAAC9B,UAAU,EAAE;MACnB,IAAIA,UAAU,EACZL,KAAK,CAACoC,QAAQ,CAACrC,KAAK,CAACmC,KAAK,OAE1BlC,KAAK,CAACqC,WAAW,CAACtC,KAAK,CAACmC,KAAK;MAG/B,IAAInC,KAAK,CAACoC,QAAQ,EAChBpC,KAAK,CAACoC,QAAQ,CAAC9B,UAAU;IAE7B;EACF,CAAC;EAED,IAAAiC,qBAAA,GAAmBxC,yCAAW,CAAAY,aAAA,CAAAA,aAAA,KACzBX,KAAK;MACRkC,UAAU,EAAElC,KAAK,CAACkC,UAAU,IAAIjC,KAAK,CAACiC,UAAU;MAChDlB,UAAU,EAAEhB,KAAK,CAACgB,UAAU,IAAIf,KAAK,CAACe,UAAU;MAChDC,IAAI,EAAEjB,KAAK,CAACiB,IAAI,IAAIJ,yCAAkB,CAAC2B,GAAG,CAACvC,KAAK;IAAA,IAC/C+B,WAAW,EAAE9B,QAAQ;IALnBG,UAAU,GAAAkC,qBAAA,CAAVlC,UAAA;EAOL,OAAO;gBAACA;EAAU,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}