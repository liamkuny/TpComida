{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport _useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { useSubscription } from 'use-subscription';\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n    colorModeContext = _React$useContext.colorMode;\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === 'dark' ? dark : light;\n}\nexport var useAppState = function useAppState() {\n  var subscription = React.useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return AppState.currentState;\n      },\n      subscribe: function subscribe(callback) {\n        AppState.addEventListener('change', callback);\n        return function () {\n          return AppState.removeEventListener('change', callback);\n        };\n      }\n    };\n  }, []);\n  return useSubscription(subscription);\n};\nexport var useColorScheme = function useColorScheme() {\n  var colorScheme = _useColorScheme();\n  var _useState = useState(colorScheme),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentScheme = _useState2[0],\n    setCurrentScheme = _useState2[1];\n  var appState = useAppState();\n  useEffect(function () {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  var _useState3 = useState(initialColorMode),\n    _useState4 = _slicedToArray(_useState3, 2),\n    colorMode = _useState4[0],\n    setRawMode = _useState4[1];\n  var setColorMode = React.useCallback(function _callee(val) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!colorModeManager) {\n            _context.next = 3;\n            break;\n          }\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(colorModeManager.set(val));\n        case 3:\n          setRawMode(val);\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  }, [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regeneratorRuntime.async(function getMode$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));\n            case 2:\n              value = _context2.sent;\n              if (value && value !== colorMode) {\n                setRawMode(value);\n              }\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n    colorModeContext = _React$useContext2.colorMode;\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"names":["React","useState","useEffect","HybridContext","AppState","_useColorScheme","useSubscription","useColorMode","_React$useContext","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","_useColorMode","useAppState","subscription","useMemo","getCurrentValue","currentState","subscribe","callback","addEventListener","removeEventListener","useColorScheme","colorScheme","_useState","_useState2","_slicedToArray","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","_useState3","_useState4","setRawMode","setColorMode","useCallback","_callee","val","_regeneratorRuntime","async","_callee$","_context","prev","next","awrap","set","stop","Promise","getMode","value","getMode$","_context2","get","sent","useAccessibleColors","_React$useContext2","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["C:\\Users\\devandroid\\Desktop\\BIEEN\\TpComida\\node_modules\\native-base\\lib\\module\\core\\color-mode\\hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        AppState.addEventListener('change', callback);\n        return () => AppState.removeEventListener('change', callback);\n      },\n    }),\n    []\n  );\n  return useSubscription(subscription);\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}